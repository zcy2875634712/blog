<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ybyb</title>
    <link>https://zcy2875634712.github.io/</link>
    <description>Recent content on ybyb</description>
    <image>
      <title>ybyb</title>
      <url>https://zcy2875634712.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://zcy2875634712.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://zcy2875634712.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>flask</title>
      <link>https://zcy2875634712.github.io/posts/note/python/flask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zcy2875634712.github.io/posts/note/python/flask/</guid>
      <description>开始 from flask import Flask app = Flask(__name__)	#实例化Flask类，__name__为程序名 # 注册路由,路由负责管理URL和函数之间的映射, 而这个函数则被称为视图函数 @app.route(&amp;#39;/&amp;#39;) def index(): return &amp;#39;hello&amp;#39; 运行服务器：flash run
数据库 ORM ORM 把数据库映射成对象。 数据库的表（table） --&amp;gt; 类（class） 记录（record，行数据）	--&amp;gt; 对象（object） 字段（field）	--&amp;gt; 对象的属性（attribute） 初始化 from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) db = SQLAlchemy(app) 模型类 class User(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(20)) age = db.Column(db.Integer) CRUD ############创建############ record = User(name=&amp;#39;Jack&amp;#39;, age=33) db.session.add(record) db.session.commit() ############查找############ record = User.query.filter_by(name=&amp;#39;Jack&amp;#39;) ############读取############ age = record.</description>
    </item>
    
    <item>
      <title>linux命令</title>
      <link>https://zcy2875634712.github.io/posts/note/linux/linux%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zcy2875634712.github.io/posts/note/linux/linux%E5%91%BD%E4%BB%A4/</guid>
      <description>tar 解压tar -xvf filename
压缩tar -zcvf filename.tar.gz filename</description>
    </item>
    
    <item>
      <title>python速查</title>
      <link>https://zcy2875634712.github.io/posts/%E9%80%9F%E6%9F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zcy2875634712.github.io/posts/%E9%80%9F%E6%9F%A5/</guid>
      <description>字符串 运算 a=&amp;#39;hello,&amp;#39; b=&amp;#39;world&amp;#39; print(a + b) print(&amp;#39;#&amp;#39;*5)	#输出&amp;#39;#####&amp;#39; 输出 a = &amp;#39;hello&amp;#39; b = &amp;#39;world&amp;#39; # hello,world print(f&amp;#39;{a},{b}&amp;#39;)	print(&amp;#39;{},{}&amp;#39;.format(a, b)) print(&amp;#39;%s,%s&amp;#39; % (a, b)) 列表（list） # 创建列表 li1 = [] li2 = [1, 2, 3] li3 = list((1, 2, 3))	#元组转换为列表 li4 = list(range(1, 4)) li5 = [x for x in range(1, 4)] # 更新列表元素 li = [1, 2] li.append(3) li.insert(2, 4)	#[1, 2, 4, 3], 下标为2插入4 # 删除列表元素 del listname[index] del listname[start : end]	#包括start，不包括end listname.</description>
    </item>
    
    <item>
      <title>shell</title>
      <link>https://zcy2875634712.github.io/posts/note/linux/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zcy2875634712.github.io/posts/note/linux/shell/</guid>
      <description>Bash 参数拓展 删除前缀后缀
echo $str	# a.b.c.d echo ${str%.*}	# a.b.c echo ${str%%.*}	# a echo ${str#*.}	#b.c.d echo ${str##*.}	#d sed #删除 sed &amp;#39;/^$/d&amp;#39; &amp;lt;file&amp;gt; </description>
    </item>
    
    <item>
      <title>Untitled</title>
      <link>https://zcy2875634712.github.io/posts/note/untitled/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zcy2875634712.github.io/posts/note/untitled/</guid>
      <description>abc </description>
    </item>
    
    <item>
      <title>vim</title>
      <link>https://zcy2875634712.github.io/posts/note/linux/vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zcy2875634712.github.io/posts/note/linux/vim/</guid>
      <description>动词
d # 表示删除delete r # 表示替换replace c # 表示修改change y # 表示复制yank v # 表示选取visual select 名词
w # 表示一个单词word s # 表示一个句子sentence p # 表示一个段落paragraph t # 表示一个 HTML 标签tag 介词
i # 表示在...之内 inside a # 表示环绕... around t # 表示到...位置前 to f # 表示到...位置上 forward 动词+介词+名词
diw di{ </description>
    </item>
    
    <item>
      <title>原来这就是网络</title>
      <link>https://zcy2875634712.github.io/posts/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%8E%9F%E6%9D%A5%E8%BF%99%E5%B0%B1%E6%98%AF%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zcy2875634712.github.io/posts/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%8E%9F%E6%9D%A5%E8%BF%99%E5%B0%B1%E6%98%AF%E7%BD%91%E7%BB%9C/</guid>
      <description>原文：https://www.cnblogs.com/flashsun/p/14266148.html
家庭网络 分组交换：在通信过程中，通信双方以分组为单位、使用存储-转发机制实现数据交互的通信方式
分组：由一块用户数据和必要的地址和管理信息组成，保证网络能够将数据传递到目标。类似于从邮局发送的包裹上注明的地址一样,只有提供给网络这些信息，网络（邮局）才能把分组（包裹）往正确的地址传送</description>
    </item>
    
    <item>
      <title>复试问答</title>
      <link>https://zcy2875634712.github.io/posts/note/%E5%A4%8D%E8%AF%95%E9%97%AE%E7%AD%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zcy2875634712.github.io/posts/note/%E5%A4%8D%E8%AF%95%E9%97%AE%E7%AD%94/</guid>
      <description>你为什么选择跨专业考研？
自我介绍
各位老师上午好，我是xxx，非常荣幸能够进入林科大软件工程的复试。我本科就读于中南林业科技大学的食品质量与安全专业，在林科大的四年里，优越的人文环境，浓厚的学习氛围时刻熏陶着我，专业成绩良好。 我选择跨考软件工程这一专业，最重要的原因就是热爱，对编程的兴趣起源于高中信息技术教材上的VB语言，从简单的打字测速程序到复杂的管理系统让我感受到了编程的强大力量。其次是因为一直以来我的理想就是成为一名程序员，我在高考后de暑假自学了C语言，本科期间自学了python和数据结构。 不忘初心，方得始终，希望有机会能够继续跟随学校优秀的老师们学习软件工程相关知识，相信凭借自己的勤奋和踏实，能在计算机领域提升自己的专业素养和实践能力，谢谢老师，我的自我介绍完毕。 Hello teachers, good morning. I am xxx, and it is my great honor to have the opportunity to participate in the software engineering interview at Central South University of Forestry and Technology. I majored in Food Quality and Safety at Central South University of Forestry and Technology for my undergraduate studies. During my four years at Central South University of Forestry and Technology, I have been influenced by the excellent humanistic environment and strong academic atmosphere, and my academic performance was outstanding.</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>https://zcy2875634712.github.io/posts/note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zcy2875634712.github.io/posts/note/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>title: 数据结构 单向链表 //插入节点 newNode-&amp;gt;next = curNode-&amp;gt;next; curNode-&amp;gt;next = newNode; //遍历节点 for (p = head-&amp;gt;next; p != NULL; p = p-&amp;gt;next) //删除节点 preNode-&amp;gt;next = curNode-&amp;gt;next; free(curNode); 树 树相关定义 根节点：没有父节点 非根节点：只有一个父节点 节点的度：子树的数目 叶子：度为零的节点</description>
    </item>
    
    <item>
      <title>核心纲要读书笔记</title>
      <link>https://zcy2875634712.github.io/posts/note/%E6%A0%B8%E5%BF%83%E7%BA%B2%E8%A6%81%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zcy2875634712.github.io/posts/note/%E6%A0%B8%E5%BF%83%E7%BA%B2%E8%A6%81%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>mo x本文由 简悦 SimpRead 转码， 原文地址 marlous.github.io
Mo&amp;rsquo;s Blog at GitHub
参考：
1、 《软件工程导论》张海潘版
2、 软件工程——思维导图
3、 软件工程导论张海潘 (第六版) 第 1-13 章总结
4、 软件工程的基本概念
5、 软件工程期末考试重点
6、 软件工程考试重点内容
7、 软件工程期末考试复习题及答案
软件工程 来源见水印。
1 工具 参考博文 《DevOps 与 CI/CD 的概念》。
项目管理： 任务跟踪：禅道、Trello、Teambition 等。 项目计划：禅道、Trello、Teambition 等。 团队沟通：Slack、Teambition 等。 需求分析： 需求跟踪：禅道、Teambition、Trello 等。 原型制作：Adobe XD CC、Axure、Sketch 等，参考：16 种原型制作工具及使用介绍。 设计： UML 建模：Violet UM、ProcessOn、StarUML、Visio 等。（类图、对象图；用例图、状态图、活动图、序列图。参考：UML 各种图总结精华、各种图含义作用 ） 图表制作：Excel、亿图等。 开发： 源代码管理：GitHub、GitLab、SubVersion 等（Git、SVN）。 持续集成：Jenkins、CireleCI、AppCenter、Travis CI、flow.ci 等。 测试： Bug 跟踪：禅道、Teambition、Trello、The Bug Genie 等。 测试管理平台：TestLink、Redmine、禅道、TestCenter 等。 自动化测试：常用的：QPT、LR。/ 开源功能自动化测试工具：Watir、Selenium、MaxQ、WebInject。/ 开源性能自动化测试工具：Jmeter、OpenSTA、DBMonster、TPTEST、Web Application Load Simulator。 补充，自动化构建和测试: Apache Ant、Maven 、Selenium、PyUnit、QUnit、JMeter、Gradle、PHPUnit。 运行维护： 自动化部署：Jenkins、ElectricFlow、DeployBot、CireleCI、AppCenter、Travis CI 等。 日志分析：Logstash、CollectD、StatsD 等。 线上监控：Nagios、Ganglia、Sensu、zabbix、ICINGA、Graphite、Kibana 等。 2 软件工程文档 需要文档的几个方面： 立项文档 需求分析文档 概要设计和架构设计 详细设计 源代码 配置文档 单元测试文档 集成测试文档 验收文档 维护文档 用户操作手册 项目管理文档 具体文档： 项目管理文档：</description>
    </item>
    
    <item>
      <title>深度学习</title>
      <link>https://zcy2875634712.github.io/posts/note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zcy2875634712.github.io/posts/note/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</guid>
      <description>title: 神经网络 神经元 一个神经元的功能是求得输入向量与权向量的内积后加偏置，经一个非线性传递函数得到一个标量结果。</description>
    </item>
    
    <item>
      <title>软件工程导论</title>
      <link>https://zcy2875634712.github.io/posts/note/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zcy2875634712.github.io/posts/note/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/</guid>
      <description>title: 软件工程笔记 软件危机 定义：软件危机是指在计算机软件的开发和维护过程中所遇到的一系列严重问题 原因： （1）客观原因 ① 软件是计算机系统中的逻辑部件，缺乏“可见性”，因此管理和控制软 件开发过程相当困难 ② 软件维护通常意味着改正或修改原来的设计，因此软件较难维护 ③ 软件规模庞大，而程序复杂性将随着程序规模的增加而呈指数上升 （2）主观原因 ① 存在与软件开发和维护有关的许多错误认识和做法 ② 对用户要求没有完整准确的认识就匆忙着手编写程序 ③ 开发人员只重视程序而忽视软件配置的其余成分（文档和数据等） ④ 软件开发人员轻视维护 软件工程 采用工程的概念、原理、技术和方法来开发与维护软件，把经过时间考 验而证明正确的管理技术和当前能够得到的最好的技术方法结合起来， 以经济地开发出高质量的软件并有效地维护它
软件工程七条基本原理 1.用分阶段的生命周期计划严格管理 2.坚持进行阶段评审 3.实行严格的产品控制 4.采用现代程序设计技术 5.结果应能清楚地审查 6.开发小组的人员应该少而精 7.承认不断改进软件工程实践的必要性 软件工程方法学 技术方法的集合称为方法学（范型）。分为传统方法学和面向对象方法学 软件工程方法学包括3个要素：方法、工具和过程 传统方法学（生命周期方法学或结构化范型） 优点 把软件生命周期划分成若干相对独立、简单的阶段，便于不同人员分工协作，降低开发的困难程度 开发过程中采用科学的管理技术和良好的技术方法，且在每个阶段结束之前都进行严格的审查，保证了软件的质量，提高了软件的可维护性 大大提高了软件开发的成功率和生产率 缺点 不适用于软件规模庞大、或者对软件的需求是模糊的或会随时间变化而变化的情况 结构化范型技术把数据和操作人为地分离成两个独立的部分，增加了软件开发与维护的难度
面向对象方法学 与传统方法学的对比 a．传统方法学强调自顶向下、逐层分解、顺序开发 b．面向对象方法学强调主动地多次反复迭代地开发，保证了在各项开发活动之间的平滑过渡 优点 a．降低了软件产品的复杂性 b．提高了软件的可理解性 c．简化了软件的开发和维护工作 d．提高了软件的可重用性
软件过程 定义：获得高质量软件所需要完成的一系列任务的框架 表示：生命周期模型 瀑布模型的特点: 1.阶段间具有顺序性和依赖性。 2.推迟实 现的观点。3.质量保证的观点。 快速原型 是快速建立起来的可以在计算机上运行的程序，它 所能完成的功能往往是最终产品能完成功能的一个子集。 增量模型: 它分批地逐步向用户提交产品，整个软件产品被分 解成许多个增量构件，开发人员一个构件一个构件地向用户 提交产品。 螺旋模型; 基本思想是使用原型及其他方法来尽量降低风险。 理解这种模型的一个简单方法，是把它看作在每个阶段之前 都增加了风险分析过程的快速原型模型。 (使用于内部开发 的大规模软件项目 ) 喷泉模型: 强调的是“迭代”和“无缝“的特性 是典型的面 向对象的软件过程模型之一.</description>
    </item>
    
    <item>
      <title>速查</title>
      <link>https://zcy2875634712.github.io/posts/note/go/%E9%80%9F%E6%9F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zcy2875634712.github.io/posts/note/go/%E9%80%9F%E6%9F%A5/</guid>
      <description>Variables:
goCopy codevar name string = &amp;#34;John&amp;#34; age := 30 // type inferred as int var ( city string = &amp;#34;New York&amp;#34; zipCode int = 10001 ) Data Types:
goCopy codebool string int, int8, int16, int32, int64 uint, uint8, uint16, uint32, uint64, uintptr byte (alias for uint8) rune (alias for int32) float32, float64 complex64, complex128 Constants:
goCopy codeconst pi = 3.14 const ( monday = &amp;#34;Monday&amp;#34; tuesday = &amp;#34;Tuesday&amp;#34; ) Control Structures:</description>
    </item>
    
    <item>
      <title>速查</title>
      <link>https://zcy2875634712.github.io/posts/note/python/%E9%80%9F%E6%9F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zcy2875634712.github.io/posts/note/python/%E9%80%9F%E6%9F%A5/</guid>
      <description>基本语法 # 输出到控制台 print(&amp;#34;Hello, world!&amp;#34;) # 定义变量 x = 42 y = &amp;#34;Python&amp;#34; # 条件语句 if x &amp;gt; 0: print(&amp;#34;x is positive&amp;#34;) elif x == 0: print(&amp;#34;x is zero&amp;#34;) else: print(&amp;#34;x is negative&amp;#34;) # 循环 for i in range(10): print(i) # 列表 fruits = [&amp;#34;apple&amp;#34;, &amp;#34;banana&amp;#34;, &amp;#34;cherry&amp;#34;] print(fruits[0]) # 输出 &amp;#34;apple&amp;#34; print(len(fruits)) # 输出 3 # 字典 person = {&amp;#34;name&amp;#34;: &amp;#34;John&amp;#34;, &amp;#34;age&amp;#34;: 30} print(person[&amp;#34;name&amp;#34;]) # 输出 &amp;#34;John&amp;#34; print(person.get(&amp;#34;gender&amp;#34;, &amp;#34;unknown&amp;#34;)) # 输出 &amp;#34;unknown&amp;#34; # 函数 def greet(name): print(&amp;#34;Hello, &amp;#34; + name + &amp;#34;!</description>
    </item>
    
  </channel>
</rss>
